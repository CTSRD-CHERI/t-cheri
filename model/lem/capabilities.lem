open import Pervasives_extra
open import Sail2_values
open import Sail2_prompt_monad

(* Abstraction of capabilities *)

type perms = list bool

type address = nat
type otype = nat

class (Capability 'c)
  val is_tagged : 'c -> bool
  val is_sealed : 'c -> bool
  val is_sentry : 'c -> bool
  val is_indirect_sentry : 'c -> bool
  val get_base : 'c -> address
  val get_top : 'c -> address
  val get_obj_type : 'c -> otype
  val get_perms : 'c -> perms
  val get_cursor : 'c -> address
  val is_global : 'c -> bool
  val seal : 'c -> otype -> 'c
  val unseal : 'c -> 'c
  val clear_global : 'c -> 'c
  val cap_of_mem_bytes : list memory_byte -> bitU -> maybe 'c
  val permits_execute : 'c -> bool
  val permits_ccall : 'c -> bool
  val permits_load : 'c -> bool
  val permits_load_cap : 'c -> bool
  val permits_seal : 'c -> bool
  val permits_store : 'c -> bool
  val permits_store_cap : 'c -> bool
  val permits_store_local_cap : 'c -> bool
  val permits_system_access : 'c -> bool
  val permits_unseal : 'c -> bool
end

(* Capability ordering with respect to their bounds and permissions *)

val address_range : address -> address -> list address
let address_range start len = genlist (fun n -> start + n) len

val get_mem_region : forall 'cap. Capability 'cap => 'cap -> set address
let get_mem_region c =
  if get_top c < get_base c then {} else
  let len = get_top c - get_base c in
  Set.fromList (address_range (get_base c) len)

val leq_bools : list bool -> list bool -> bool
let rec leq_bools l1 l2 = match (l1, l2) with
  | ([], []) -> true
  | (_::_, []) -> false
  | ([], _::_) -> false
  | (b1 :: l1, b2 :: l2) -> (b1 --> b2) && leq_bools l1 l2
end
declare termination_argument leq_bools = automatic

val leq_perms : perms -> perms -> bool
let leq_perms p1 p2 = leq_bools p1 p2

val leq_bounds : forall 'cap. Capability 'cap => 'cap -> 'cap -> bool
let leq_bounds c1 c2 =
  (get_base c1 = get_base c2 && get_top c1 = get_top c2) ||
  (get_base c1 >= get_base c2 &&
   get_top c1 <= get_top c2 &&
   get_base c1 <= get_top c1)

val leq_cap : forall 'cap. Capability 'cap, Eq 'cap => 'cap -> 'cap -> bool
let leq_cap c1 c2 =
  (c1 = c2) ||
  (not (is_tagged c1)) ||
    ((is_tagged c2) &&
     (not (is_sealed c1) && not (is_sealed c2)) &&
     (leq_bounds c1 c2) &&
     (is_global c1 --> is_global c2) &&
     (leq_perms (get_perms c1) (get_perms c2)))

val invokable : forall 'cap. Capability 'cap => 'cap -> 'cap -> bool
let invokable cc cd =
  is_tagged cc && is_tagged cd &&
  is_sealed cc && is_sealed cd &&
  not (is_sentry cc) && not (is_sentry cd) &&
  permits_ccall cc && permits_ccall cd &&
  get_obj_type cc = get_obj_type cd &&
  permits_execute cc && not (permits_execute cd)

val clear_global_unless : forall 'cap. Capability 'cap => bool -> 'cap -> 'cap
let clear_global_unless g c = if g then c else clear_global c

(* Derivation of capabilities, bounded by derivation depth to guarantee termination *)
val cap_derivable_bounded : forall 'cap. Capability 'cap, SetType 'cap, Eq 'cap => nat -> set 'cap -> 'cap -> bool
let rec cap_derivable_bounded n C c = match n with
  | 0 -> (c IN C)
  | n+1 ->
     (exists c'. cap_derivable_bounded n C c' && leq_cap c c') ||
     (exists c' otype. cap_derivable_bounded n C c' && is_tagged c' && not (is_sealed c') && seal c' otype = c && (is_sentry c || is_indirect_sentry c)) ||
     (exists c' c''.
        cap_derivable_bounded n C c' &&
        cap_derivable_bounded n C c'' &&
        is_tagged c' && is_tagged c'' && not (is_sealed c'') &&
        get_cursor c'' IN get_mem_region c'' &&
        ((is_sealed c' && permits_unseal c'' && get_obj_type c' = get_cursor c'' && clear_global_unless (is_global c'') (unseal c') = c) ||
         (not (is_sealed c') && permits_seal c'' && seal c' (get_cursor c'') = c)))
end

declare termination_argument cap_derivable_bounded = automatic

(* TODO: Prove an upper bound for the derivation depth.  For a finite set of n
   capabilities, it seems a derivation depth of n+1 should be enough: If all
   but one capabilities in C are sealed, up to n-1 unsealing operations and
   possibly a restriction and a sealing operation might be necessary to derive
   the desired capability. *)
let cap_derivable C c = (exists n. cap_derivable_bounded n C c)

val reads_from_reg : forall 'regval. event 'regval -> maybe register_name
let reads_from_reg e = match e with
  | E_read_reg r _ -> Just r
  | _ -> Nothing
end

val reads_reg_caps : forall 'regval 'cap. Capability 'cap, SetType 'cap =>
  ('regval -> set 'cap) -> event 'regval -> set 'cap
let reads_reg_caps caps_of_regval e = match e with
  | E_read_reg _ v -> Set.filter is_tagged (caps_of_regval v)
  | _ -> Set.empty
end

val writes_to_reg : forall 'regval. event 'regval -> maybe register_name
let writes_to_reg e = match e with
  | E_write_reg r _ -> Just r
  | _ -> Nothing
end

val writes_reg_caps : forall 'regval 'cap. Capability 'cap, SetType 'cap =>
  ('regval -> set 'cap) -> event 'regval -> set 'cap
let writes_reg_caps caps_of_regval e = match e with
  | E_write_reg _ v -> Set.filter is_tagged (caps_of_regval v)
  | _ -> Set.empty
end

val reads_mem_val : forall 'regval. event 'regval -> maybe (address * nat * list memory_byte * bitU)
let reads_mem_val e = match e with
  | E_read_memt _ addr sz (v, t) -> Just (addr, sz, v, t)
  | E_read_mem _ addr sz v -> Just (addr, sz, v, B0)
  | _ -> Nothing
end

val reads_mem_cap : forall 'regval 'cap. Capability 'cap =>
  event 'regval -> maybe (address * nat * 'cap)
let reads_mem_cap e =
  Maybe.bind (reads_mem_val e) (fun (addr, sz, v, t) ->
  Maybe.bind (cap_of_mem_bytes v t) (fun c ->
  if is_tagged c then Just (addr, sz, c) else Nothing))

val writes_mem_val : forall 'regval. event 'regval -> maybe (address * nat * list memory_byte * bitU)
let writes_mem_val e = match e with
  | E_write_memt _ addr sz v t _ -> Just (addr, sz, v, t)
  | E_write_mem _ addr sz v _ -> Just (addr, sz, v, B0)
  | _ -> Nothing
end

val writes_mem_cap : forall 'regval 'cap. Capability 'cap =>
  event 'regval -> maybe (address * nat * 'cap)
let writes_mem_cap e =
  Maybe.bind (writes_mem_val e) (fun (addr, sz, v, t) ->
  Maybe.bind (cap_of_mem_bytes v t) (fun c ->
  if is_tagged c then Just (addr, sz, c) else Nothing))
